# Source functions
source("functions.R")


# Set parameters
# data_dir <- "./data/"
# #filename <- "osbs_28_west.csv"
#ilename <- "VDGIF-T5-06072016.csv"
#filename <- "rice_control_one.CSV"
# # DEBUG <- FALSE
# write_out <- FALSE
# 

data_dir <- "./data/"

#filename <- "AF_G8_0729016.CSV"
filename <- "AF_A4_072516.CSV"
#filename <- "testdata.CSV"
# DEBUG <- FALSE
write_out <- FALSE

test.data <- read.pcl(data_dir, filename)

test.2 <- code_hits(test.data)
#test.2 <- adjust_by_user(df, 1.2)
# test.2 <- add_sky_hits(test.2)
# test.2 <- add_can_hits(test.2)
# test.2 <- add_markers(test.2)
head(test.2)
# head(test.2)

test.2 <- adjust_by_user(test.2, 1.2)

plot(test.2$index,
     test.2$return_distance,

     ylim = c(-100000000, 40),
     ylab = "Canopy Height (m)",
     xlab = "Index Value")

# diagnostic.plot <- pcl.diagnostic.plot(test.2, "", -99999999)
# diagnostic.plot
# # # adding bins
# length(test.2[test.2$return_distance < -9999, 2])
# g<- length(which(test.2$return_distance < -9999))
# 
# 
transect.length <- (length(which((test.2$return_distance <= -9999))) - 1) * 10
# markers <- test.2[test.2$return_distance <= -9999 & !is.na(test.2$return_distance), ]

test.data.binned <- split_transects_from_pcl(test.2, transect.length, 10)

plot(test.data.binned$index,
     test.data.binned$return_distance,
     
     ylim = c(0, 40),
     ylab = "Canopy Height (m)",
     xlab = "Index Value")

test.data.binned[test.data.binned$return_distance <= -9999 & !is.na(test.data.binned$return_distance), ]


head(test.data.binned)
summary(test.data.binned)

csc_metrics(test.data.binned)

m1 <- make_matrix(test.data.binned)
m1 <- calc_vai(m1)
# m1 <- max_vai(m1)

summary.matrix <- make_summary_matrix(test.data.binned, m1)

# 
# 
# 
# matrix.test <- merge(summary.matrix, m1, by = "xbin")
# matrix.test$std.bin.num <- matrix.test$vai * ((matrix.test$zbin  - matrix.test$height.bin)^2)
# gggg <- aggregate(std.bin.num ~ xbin, data = matrix.test, FUN = sum, na.rm = FALSE, na.action = 'na.pass')
# gggg[is.na(gggg)] <- 0
# xxx <- merge(summary.matrix, gggg, by = "xbin")
# xxx$std.bin <- xxx$std.bin.num / xxx$sum.vai
# 
# std.std<- sum( (xxx$std.bin * xxx$std.bin) / transect.length), na.rm=TRUE)
# xxx$std.std.pre[is.infinite(xxx$std.std.pre)] <- 0
# stdstd = sum(xxx$std.std.pre)
# 
# xxx$mean.std.pre <- (  xxx$std.bin / xxx$max.vai.z)
# xxx$mean.std.pre[is.infinite(xxx$mean.std.pre)] <- 0
# meanstd = sum(xxx$mean.std.pre)
# 


stuff <- calc_rugosity(summary.matrix, m1, filename)

write.pcl.to.csv(stuff, filename)
variable.list.to.write <- data.frame(stuff)

write.csv(variable.list.to.write, file = "variablelist.csv")







variable.list.to.write <- ldply(stuff, function(x) x$toDataFrame())
lapply(stuff, function(x) write.table( data.frame(x), 'variablelist.csv', append = TRUE, sep=',', row.names = TRUE ))
write.csv(variable.list.to.write, file = "variablelist.csv")

stdstd <- s

xxx$mean.std.denom <- (xxx$std.bin * xxx$std.bin) / 30



y <- subset(m1, max.ht > 0)
y <- distinct(y, max.ht, .keep_all = TRUE)
y <- aggregate(max.ht ~ xbin, data = m1, FUN = max)
y <- subset(y, max.ht == 0)
print(y)
nrow(y)
####
####
z <- test.data.binned
zzzz <- setNames(aggregate(return_distance ~ xbin, data = z, FUN = max), c("xbin", "max.ht"))

m2 <- distinct(m1, xbin, .keep_all = TRUE)
m3 <- unique(m1[c("xbin", "zbin")])


# m1$mean.leaf.ht.by.xbin <- m1$x / m1$sum.vai.by.xbin
# 
# df <- m1
# p <- aggregate(vai ~ zbin, data = df, FUN = function(x) sum( (x$vai * x$zbin)/ sum(x$vai))
# stdBin = sum( ((df$vai * (df$zbin - mean.leaf.ht)^2) )/ sum(df$vai))

rugosity <- calc_rugosity(m1)
m2 <- m1

m1.test <- calc_sum_vai(m1)
m1.test$mean.leaf.ht  <- calc_rugosity(m1.test)
df <- m1.test
yup <- sum( (df$vai * df$zbin)/ df$sum.vai.by.zbin) 

max.vai <- max_vai(m1)
m2$vai <- vai_adjust_lai_max(m2)
rugosity2 <- calc_rugosity(m2)


############################################################333
### playing around here


p <- aggregate(vai ~ xbin, data = m1, FUN = sd, na.rm = FALSE)

# new method
z = test.data.binned
z <- subset(z, return_distance >= 0)
summary(z)
m.new <- aggregate(return_distance ~ xbin, data = z, FUN = sd) 

sd(m.new$return_distance, na.rm=TRUE)

m.vai <- bin_vai(m1)

table(m1[c(1,3)])


m1$vai[!is.finite(m1$vai)] <- 0


a[!is.finite(a)] <- 0
calc_rugosity(m1)
sd(m1$vai)
# ### heat map
# library(akima)
# library(fields)
# m.m1 <- interp(m1$xbin, m1$ybin, m1$lidar_hits)
# 
# image.plot(m.m1, zlim= c(0, 500), col = rev(tim.colors(64)))

####rry, the output is here:
####
####stdStd     = 0.9514       <- Rugosity
####height2    = 3.9023       <- 
####mode2      = 3.6332       <-
####meanHt     = 3.500        <- mean height of the canopy
####meanStd    = 3.0526       <- 
####meanLAI    = 0.5845       <- mean LAI, but how measured?
####meanTopel  = 7.1905       <- mean top of the canopy, like surface
# stdStd height2 mode2 modeEl meanHeight meanStd meanLAI meanTopel_CPAll
# 
# 
# ans =
#      
#      0.9514    3.9023    3.6332    3.5000    3.0526    0.5845    1.9851    7.1905
# the code prints it to the command line
# i usually then pasted it into an excel sheet
# 




#### this makes a hit grid. keep it.
#### 
#### 
vai.label =  expression(paste(VAI~(m^2 ~m^-2)))
x11(width = 8, height = 6)
ggplot(m1, aes(x = xbin, y = zbin))+ 
     geom_tile(aes(fill = vai))+
     scale_fill_gradient(low="white", high="dark green", 
                         name=vai.label)+
     #scale_y_continuous(breaks = seq(0, 20, 5))+
     # scale_x_continuous(minor_breaks = seq(0, 40, 1))+
     theme(axis.line = element_line(colour = "black"),
           panel.grid.major = element_blank(),
           panel.grid.minor = element_blank(),
           panel.background = element_blank())+
     xlim(0,40)+
     ylim(0,30)+
     xlab("Distance along transect (m)")+
     ylab("Height above ground (m)")+
     ggtitle("UVA A4-01 West (PCL)")+
     theme(plot.title = element_text(lineheight=.8, face="bold"))

calc_rugosity_jess(m1)

m1$adj.vai <- vai_adjust_lai_max(m1)

x11()
ggplot(m1, aes(x = xbin, y = zbin))+ 
     geom_tile(aes(fill = adj.vai))+
     scale_fill_gradient(low="palegreen1", high="dark green", 
                         name="LiDAR\n Method Two")+
     #scale_y_continuous(breaks = seq(0, 20, 5))+
     # scale_x_continuous(minor_breaks = seq(0, 40, 1))+
     theme(axis.line = element_line(colour = "black"),
           panel.grid.major = element_blank(),
           panel.grid.minor = element_blank(),
           panel.background = element_blank())+
     xlim(0,40)+
     ylim(0,20)+
     xlab("Distance along transect (m)")+
     ylab("Height above ground (m)")

calc_rugosity(m1)
calc_rugosity_adj(m1)




p <- aggregate(vai ~ xbin, data = m1, FUN = sd)
sd(p$vai)




#####
#####
#####
#####
# looking at VAI stuff
vai.seq <- seq(0.1, 8, by =0.01)

test.vai <- data.frame(vai.seq)
plot(test.vai$vai.seq)
test.vai$vai.seq <- vai.seq * -1


test.vai$vai.seq <- log(1.0 - test.vai$vai.seq*0.9817)/0.5
plot(test.vai$vai.seq)


